import streamlit as st
import base64
import mysql.connector
from datetime import datetime
import pandas as pd
import re


st.set_page_config(
    page_title="Contacts",
    page_icon="	:barber:"
)
st.title("–ö–æ–Ω—Ç–∞–∫—Ç–∏ :phone:")
st.divider()
with open("style.css") as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)


def sql_connection():
    try:
        connection = mysql.connector.connect(
            host="127.0.0.1",
            user="root",
            password="501219admin$",
            database="barbershop_db"
        )
        if connection.is_connected():
            return connection
    except mysql.connector.Error as e:
        st.error(f":x: –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ—Ç–æ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏: {e}")
        return None


connection = sql_connection()
cursor = connection.cursor()

sql_query = "SELECT username FROM REGISTRATIONS"
cursor.execute(sql_query)
get_usernames = cursor.fetchall()

sql_query = "SELECT password FROM REGISTRATIONS"
cursor.execute(sql_query)
get_passwords = cursor.fetchall()

sql_query = "SELECT email FROM REGISTRATIONS"
cursor.execute(sql_query)
get_emails = cursor.fetchall()

passwords = [lis[-1] for lis in get_passwords]
usernames = [lis[-1] for lis in get_usernames]
mails = [lis[-1] for lis in get_emails]


img_path = "C:\\Users\\vaset\\PycharmProjects\\BarbershopProject\\sidebar_photo4.png"
bg = "png"
styling = f'''
   <style>
    [data-testid="stAppViewContainer"]
    {{
     background-color: rgba(246, 246, 246);
     background-position: center ;
     background-size: cover;
     text-align: center;
    }}

    [data-testid="stSidebarContent"]
    {{
     background: url(data:image/{bg};base64,{base64.b64encode(open(img_path, "rb").read()).decode()});
     background-position: left ;
     background-size: cover;
     text-align: left;
    }}

    [data-testid="StyledLinkIconContainer"]
    {{
      color: white;
      font-family: "Georgia";
      font-style: normal;

    }}
   </style>
   '''


def validate_email(email):
    """
    Check Email Validity
    :param email:
    :return True if email is valid else False:
    """
    pattern = "^[a-zA-Z0-9-_]+@[a-zA-Z0-9]+\.[a-z]{1,3}$" #tesQQ12@gmail.com

    if re.match(pattern, email):
        return True
    return False


st.markdown(styling, unsafe_allow_html=True)

if 'username' not in st.session_state:
  st.session_state.username = ''
if 'form' not in st.session_state:
  st.session_state.form = ''
if 'email' not in st.session_state:
    st.session_state.email = ''
def select_signup():
    st.session_state.form = 'signup_form'


def user_update(name):
    st.session_state.username = name


def get_email():
    sql = f'''
                    SELECT email FROM REGISTRATIONS 
                    WHERE username = '{st.session_state.username}'
                    '''
    cursor.execute(sql)
    get_email = cursor.fetchone()
    return get_email[0]


if st.session_state.username != '':
    st.sidebar.write(f"–ó–¥—Ä–∞–≤–µ–π—Ç–µ,  {st.session_state.username.upper()}")

# Initialize Sing In or Sign Up forms
if st.session_state.form == 'signup_form' and st.session_state.username == '':
    st.sidebar.subheader(":green[–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è]")
    signup_form = st.sidebar.form(key='signup_form', clear_on_submit=False)
    new_name = signup_form.text_input(label='–ò–º–µ*')
    new_surname = signup_form.text_input(label='–§–∞–º–∏–ª–∏—è*')
    new_username = signup_form.text_input(label='–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ*')
    new_user_email = signup_form.text_input(label='–ò–º–µ–π–ª –∞–¥—Ä–µ—Å*')
    new_user_pas = signup_form.text_input(label='–ü–∞—Ä–æ–ª–∞*', type='password')
    user_pas_conf = signup_form.text_input(label='–ü–æ—Ç–≤—ä—Ä–¥–∏ –ø–∞—Ä–æ–ª–∞*', type='password')
    new_tel_number = signup_form.text_input(label='–í–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä*')
    note = signup_form.markdown('**–ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–µ—Ç–∞*')
    signup = signup_form.form_submit_button(label='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

    if signup:
        if '' in [new_username, new_user_email, new_user_pas, new_tel_number, new_name, new_surname, user_pas_conf]:
            st.sidebar.error(':x: –ù—è–∫–æ–∏ –ø–æ–ª–µ—Ç–∞ –≤—Å–µ –æ—â–µ –Ω–µ —Å–∞ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏')
        else:
            if len(new_username) < 2 and len(new_username) > 21:
                st.sidebar.error(
                    ':x: –ò–∑–±—Ä–∞–Ω–æ—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –Ω–µ –ø–æ–∫—Ä–∏–≤–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞(–¢—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–≤–µ—á–µ –æ—Ç 2 –∏ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 20 —Å–∏–º–≤–æ–ª–∞)')
            elif new_username in usernames:
                st.sidebar.error(':x: –í—ä–≤–µ–¥–µ–Ω–æ—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞')
            elif validate_email(new_user_email) is False:
                st.sidebar.error(':x: –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å')
            elif new_user_email in mails:
                st.sidebar.error(':x: –í—ä–≤–µ–¥–µ–Ω–∏—è—Ç –∏–º–µ–π–ª –∞–¥—Ä–µ—Å –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞')
            elif new_user_pas != user_pas_conf:
                st.sidebar.error(':x: –ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç')
            elif len(new_user_pas) < 4 and len(new_user_pas) > 20:
                st.sidebar.error(
                    ':x: –ò–∑–±—Ä–∞–Ω–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –Ω–µ –ø–æ–∫—Ä–∏–≤–∞ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞( –¢—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–≤–µ—á–µ –æ—Ç 4 –∏ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 20 —Å–∏–º–≤–æ–ª–∞)')
            elif len(new_tel_number) != 10:
                st.sidebar.error(':x: –¢–∞–∫—ä–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞')
            else:
                user_update(new_username)
                InsertSQL = f'''INSERT INTO REGISTRATIONS(username, password, first_name, family_name, email, telephone_number, date_of_registration)
                                                  VALUES(%s, %s, %s, %s, %s, %s, %s)'''
                now = datetime.now()
                date_joined = now.strftime('%Y-%m-%d %H:%M:%S')
                values = (
                new_username, new_user_pas, new_name, new_surname, new_user_email, new_tel_number, date_joined)
                insert = cursor.execute(InsertSQL, values)
                connection.commit()
                st.sidebar.success(':heavy_check_mark: –£—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!')
                st.sidebar.success(f" :heavy_check_mark: –î–æ–±—Ä–µ –¥–æ—à–ª–∏, {new_username.upper()}")
                del new_user_pas, user_pas_conf

elif st.session_state.username == '':
    st.sidebar.subheader(":green[–í—Ö–æ–¥]")
    login_form = st.sidebar.form(key='signin_form', clear_on_submit=True)
    username = login_form.text_input(label='–í—ä–≤–µ–¥–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ')
    user_pas = login_form.text_input(label='–í—ä–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª–∞', type='password')

    if username in usernames and user_pas in passwords:
        login = login_form.form_submit_button(label='–í—Ö–æ–¥', on_click=user_update(username))
        if login:
            st.sidebar.success(f":heavy_check_mark: –ó–¥—Ä–∞–≤–µ–π—Ç–µ –æ—Ç–Ω–æ–≤–æ, {username.upper()}")
            del user_pas
    else:
        login = login_form.form_submit_button(label='–í—Ö–æ–¥')
        if login:
            st.sidebar.error(":x: –í—ä–¥–µ–¥–µ–Ω–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –∏ –ø–∞—Ä–æ–ª–∞ —Å–∞ –≥—Ä–µ—à–Ω–∏! –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ, –∏–ª–∏ —Å—ä–∑–¥–∞–π—Ç–µ –Ω–æ–≤ –∞–∫–∞—É–Ω—Ç.")
else:
    logout = st.sidebar.button(label='–ò–∑—Ö–æ–¥')
    if logout:
        user_update('')
        st.session_state.form = ''

# 'Create Account' button
if st.session_state.username == "" and st.session_state.form != 'signup_form':
    signup_request = st.sidebar.button('–°—ä–∑–¥–∞–π –Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª', on_click=select_signup)


st.write("–ü–æ—Å–ª–µ–¥–≤–∞–π—Ç–µ –Ω–∏ –≤ —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏ –∏ –Ω–∞—É—á–∏—Ç–µ –ø—ä—Ä–≤–∏ –∑–∞ –Ω–æ–≤–∏–Ω–∏ –∏ –ø—Ä–æ–º–æ—Ü–∏–∏!")
st.write('üé• YouTube –ö–∞–Ω–∞–ª - https://www.youtube.com/@MazeBarber')
st.write('üåê Facebook –°—Ç—Ä–∞–Ω–∏—Ü–∞ - https://www.facebook.com/MazeBarber')
st.write('üìß –°–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –Ω–∞—Å —á—Ä–µ–∑ –µ–ª–µ–∫—Ç–æ–Ω–Ω–∞ –ø–æ—â–∞ - MazeBarbershop_support@gmail.com')
st.divider()
st.write('–õ–æ–∫–∞—Ü–∏—è –Ω–∞ —Ñ—Ä–∏–∑—å–æ—Ä—Å–∫–∏—è —Å–∞–ª–æ–Ω :round_pushpin::world_map:')
data = pd.DataFrame({
    'latitude': [42.016740],
    'longitude': [23.086580]
})
st.map(data)
st.link_button(label='–í–∏–∂ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –≤ Google Maps', url = "https://maps.app.goo.gl/V95dnisCPXSXUK4C8")
st.divider()

comment_form = st.form(key='Comments_section', clear_on_submit=True)
with comment_form:
  txt_area = st.text_area(max_chars=500,
                          value="",
                          label="–ò–∑–ø—Ä–∞—Ç–∏ –Ω–∏ —Å–≤–æ—è –∫–æ–º–µ–Ω—Ç–∞—Ä –∏–ª–∏ –º–Ω–µ–Ω–∏–µ –∑–∞ —Ñ—Ä–∏–∑—å–æ—Ä—Å–∫–∏—è —Å–∞–ª–æ–Ω :speaking_head_in_silhouette:",
                          height=50
                          )
  apply_form = st.form_submit_button(label = "–ò–∑–ø—Ä–∞—Ç–∏")
  if apply_form:
    if st.session_state.username != "":
        InsertSQL = f'''
        INSERT INTO COMMENTS(username, email, comment_text, date_of_registration, is_answered)
        VALUES(%s, %s, %s, %s, %s)
        '''
        now = datetime.now()
        date_joined = now.strftime('%Y-%m-%d %H:%M:%S')
        values = (st.session_state.username, get_email(), txt_area, date_joined, '0')
        insert = cursor.execute(InsertSQL, values)
        connection.commit()
        st.success(":heavy_check_mark: –ö–æ–º–µ–Ω—Ç–∞—Ä—ä—Ç –í–∏ –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∏!")

    else:
        st.error(":x: –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –≤ –∞–∫–∞—É–Ω—Ç–∞ —Å–∏, –∑–∞ –¥–∞ –∏–∑–ø—Ä–∞—Ç–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä!")